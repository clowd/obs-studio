float srgb_linear_to_nonlinear_channel(float u)
{
	return (u <= 0.0031308) ? (12.92 * u) : ((1.055 * pow(u, 1. / 2.4)) - 0.055);
}

float3 srgb_linear_to_nonlinear(float3 v)
{
	return float3(srgb_linear_to_nonlinear_channel(v.r), srgb_linear_to_nonlinear_channel(v.g), srgb_linear_to_nonlinear_channel(v.b));
}

float3 rec709_to_rec2020(float3 v)
{
	float r = dot(v, float3(0.62740389593469914, 0.32928303837788397, 0.043313065687417190));
	float g = dot(v, float3(0.069097289358232047, 0.91954039507545904, 0.011362315566309173));
	float b = dot(v, float3(0.016391438875150235, 0.088013307877225860, 0.89559525324762468));
	return float3(r, g, b);
}

float3 rec2020_to_rec709(float3 v)
{
	float r = dot(v, float3(1.6604910021084343, -0.58764113878854973, -0.072849863319884745));
	float g = dot(v, float3(-0.12455047452159063, 1.1328998971259603, -0.0083494226043695080));
	float b = dot(v, float3(-0.018150763354905199, -0.10057889800800746, 1.1187296613629123));
	return float3(r, g, b);
}

float reinhard_channel(float x)
{
	return x / (x + 1.);
}

float3 reinhard(float3 rgb)
{
	return float3(reinhard_channel(rgb.r), reinhard_channel(rgb.g), reinhard_channel(rgb.b));
}

